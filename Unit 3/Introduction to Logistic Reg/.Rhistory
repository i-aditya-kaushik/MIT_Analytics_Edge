#Unit 3 Exercise 1
-1.5+35*-0.5
-1.5+3+5*-0.5
exp(-1)
1/(1+exp(1))
quality = read.csv('quality.csv')
str(quality)
summary(quality)
table(quality$Poorcare)
table(quality$PoorCare)
98/(nrow(quality))
install.packages('caTools')
#install.packages('caTools')after running it as an admin
library(caTools)
nrow(quality)
#So we divide the dataset to approximately half by typing in set.seed(88)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio=0.75)
split
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
nrow(qualityTrain)
nrow(qualityTest)
QualitiyLog = glm(PoorCare ~ OfficeVisits+Narcotics)
QualitiyLog = glm(PoorCare ~ OfficeVisits+Narcotics, data=quality)
QualitiyLog = glm(PoorCare ~ OfficeVisits+Narcotics, data=qualityTrain, family = binomial)
summary(QualitiyLog)
predictTrain = predict(QualitiyLog, type = "response")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
Model = glm(PoorCare ~ StartedOnCombination + ProviderCount, data=qualityTrain, family=binomial)
summary(Model)
table(qualityTrain$PoorCare, predictTrain > 0.5)
Sensitivity = 10/(15+10)
Sensitivity
Specificity = 70/(70+4)
Specificity
#install.packages('ROCR') in admin RGUI
library(ROCR)
ROCRpred = predict(predictTrain, qualityTrain$PoorCare)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCRpred, "tpr","fpr")
ROCR(perf)
plot(ROCRperf)
plot(ROCRperf, colorize = TRUE)
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1),text.adj=c(-0.2,1.7))
predictTest = predict(QualitiyLog, type = "response", newdata = qualityTest)
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
auc = as.numeric(performance(ROCRpredTest,"auc")@y.values)
auc
save.image("F:\\R\\.RData")
q()
