tweets = read.csv('tweets.csv',stringsAsFactors=FALSE)
#StringsAsFactors is always added when we are considering a text analytics problem
str(tweets)
tweets$Negative = as.factor(tweets$Avg<=-1)
table(tweets$Negative)
str(tweets)
install.packages('tm')
library(tm)
install.packages('SnowballC')
corpus = Corpus(VectorSource(tweets$Tweet))
corpus
corpus[[1]]
corpus[1]
corpus[[[1]]]
print(corpus[[1]])
library(SnowballC)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus[[1]]
corpus = tm_map(corpus,tolower)
corpus
corpus = tm_map(corpus,removePunctuation)
stopwords('english')[1:10]
corpus = tm_map(corpus,removeWords, c('apple',stopwords('english')))
corpus = tm_map(corpus,stemDocument)
corpus[[1]]
frequencies = DocumentTermMatrix(corpus)
frequencies
inspect(frequencies[1000:1005,505:515])
findFreqTerms(frequencies, lowfreq = 20)
findFreqTerms(frequencies, lowfreq = 30)
findFreqTerms(frequencies, lowfreq = 50)
findFreqTerms(frequencies, lowfreq = 100)
sparse = removeSparseTerms(frequencies, 0.995)
# Keeping the terms which come in more than 5% of the tweets
tweetsSparse = as.data.frame(as.matrix(sparse))
colnames(tweetsSparse) = make.names(colnames(tweetsSparse))
tweetsSparse$Negative = tweets$Negative
library(caTools)
set.seed(123)
split = sample.split(tweetsSparse$Negative,splitRatio=0.7)
trainSparse = subset(tweetsSparse,split==TRUE)
split = sample.split(tweetsSparse$Negative,SplitRatio=0.7)
trainSparse = subset(tweetsSparse,split==TRUE)
testSparse = subset(tweetsSparse,split==FALSE)
library(rpart)
library(rpart.plot)
tweetCART = rpart(Negative ~. , data = trainSparse,method='class')
prp(tweetCART)
predictCART = predict(tweetCART, newdata=testSparse,type='class')
table(testSparse$Negative,predictCART)
(294+18)/(294+6+37+18)
library(randomForest)
set.seed(123)
tweetRF = randomForest(Negative ~., data=trainSparse)
predictRF = predict(tweetRF,newdata=testSparse)
table(testSparse$Negative,predictRF)
(292+24)/nrow(testSparse)
predictions = predict(tweetLog, newdata=testSparse, type="response")
predictions = predict(tweetLog, newdata=testSparse, type="response")
tweetLog = glm(Negative ~ ., data=trainSparse, family="binomial")
predictLog = predict(tweetLog, newdata=testSparse, type="response")
table(testSparse$Negative, predictLog > 0.5)
q()
