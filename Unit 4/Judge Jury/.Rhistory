ste = read.csv('stevens.csv')
str(ste)
library(caTools)
set.seed(3000)
spl = sample.split(ste$Reverse, splitRatio =0.7)
spl = sample.split(ste$Reverse, SplitRatio =0.7)
train = subset(ste, spl == TRUE)
test = subset(ste, spl == FALSE)
install.packages('rpart')
library(rpart)
install.packages('rpart.plot')
library(rpart.plot)
steTree = rpart(Reverse~ Circuit+Issue+Petitioner+Respondent+LowerCourt+Uncost,data = train , method = 'class',minbucket=25)
steTree = rpart(Reverse~ Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data = train , method = 'class',minbucket=25)
prp(steTree)
predict = predict(steTree, newdata = test, type = 'class')
table(Test$Reverse,predict)
table(test$Reverse,predict)
(41+71)/nrow(test)
library(ROCR)
predROC = predict(steTree,newdata=test)
predROC
pred = prediction(predROC[,2], test$Reverse)
perf = performance(pred,"tpr","fpr")
plot(perf)
as.numeric(performance(pred, "auc")@y.values)
steTree2 = rpart(Reverse~ Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data = train , method = 'class',minbucket=5)
prp(steTree2)
steTree2 = rpart(Reverse~ Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data = train , method = 'class',minbucket=100)
prp(steTree3)
prp(steTree2)
steTree2 = rpart(Reverse~ Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data = train , method = 'class',minbucket=5)
prp(steTree2)
install.packages('randomForest')
steForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, nodesize = 25 , ntree = 200)
library(randomForest)
steForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, nodesize = 25 , ntree = 200)
table(train$Reverse)
train$Reverse = as.factor(train$Reverse)
test$Reverse = as.factor(test$Reverse)
steForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, nodesize = 25 , ntree = 200)
predictFor = predict(steForest , newdata = test)
table(test$Reverse, predictFor)
(43+72)/nrow(test)
set.seed(100)
steForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, nodesize = 25 , ntree = 200)
predictFor = predict(steForest , newdata = test)
table(test$Reverse, predictFor)
(41+73)/nrow(test)
set.seed(200)
steForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, nodesize = 25 , ntree = 200)
predictFor = predict(steForest , newdata = test)
table(test$Reverse, predictFor)
(42+75)/nrow(test)
install.packages('caret')
library(caret)
install.packages('e1071')
library(e1071)
numFolds = trainControl(method = 'cv', number =10)
cpGrid = expand.grid(.cp = seq(0.01,0.5,0.01))
train(Reverse~ Circuit+Issue+Petitioner + Respondent+LowerCourt+Unconst, data= train,method = 'rpart', trControl = numFolds, tuneGrid = cpGrid)
steTreeCV = rpart(Reverse ~ Circuit+Issue+Petitioner + Respondent+LowerCourt+Unconst, data = train,method = 'class', cp=0.19)
predictCV = predict(steTreeCV, newdata = test,type='class')
table(test$Reverse,predictCV)
(59+64)/nrow(test)
prp(steTreeCV)
q()
